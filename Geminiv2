#!/usr/bin/env python3

import argparse
import json
import logging
import mimetypes
import os
import sys
import time
from base64 import b64encode
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

import autopep8
import requests
import yaml
from dotenv import load_dotenv
from prompt_toolkit import HTML, PromptSession
from prompt_toolkit.auto_suggest import AutoSuggestFromHistory
from prompt_toolkit.completion import WordCompleter
from prompt_toolkit.history import FileHistory
from rich.console import Console
from rich.logging import RichHandler
from rich.markdown import Markdown
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.syntax import Syntax
from rich.table import Table

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format="%(message)s",
    handlers=[RichHandler(rich_tracebacks=True)],
)
logger = logging.getLogger(__name__)


class Config:
    def __init__(self):
        self.api_key: str = os.environ.get("GEMINI_API_KEY", "")
        self.model_name: str = "gemini-pro"
        self.system_prompt: str = ""
        self.temperature: float = 0.9
        self.top_p: float = 1.0
        self.max_output_tokens: int = 2048
        self.history_file: Path = Path("history.txt")
        self.max_history_entries: int = 2048
        self.history_load_limit: int = 100
        self.log_level: str = "INFO"
        self.theme: str = "monokai"
        self.auto_save: bool = True
        self.conversation_history: List[Dict[str, str]] = []
        self.auto_complete: bool = True
        self.stream: bool = False
        self.timeout: int = 60
        self.pep8_format: bool = True

    @classmethod
    def load(cls, path: Path) -> "Config":
        cfg = cls()
        if path.exists():
            try:
                with open(path, "r") as f:
                    config_data = yaml.safe_load(f)
                    if config_data:
                        cfg.__dict__.update(config_data)
                        if "history_file" in config_data:
                            cfg.history_file = Path(cfg.history_file)
            except FileNotFoundError:
                logger.warning(f"Config file not found: {path}. Using defaults.")
            except yaml.YAMLError as e:
                logger.error(f"YAML error in config file: {path}. Using defaults. {e}")
                print(f"[red]Error parsing config file {path}. Using defaults.[/red]")
            except Exception as e:
                logger.error(f"Error loading config from {path}. Using defaults. {e}")
                print(f"[red]Error loading config file {path}. Using defaults.[/red]")

        if not cfg.api_key:
            cfg.api_key = os.environ.get("GEMINI_API_KEY", "")
        return cfg

    def save(self, path: Path):
        path.parent.mkdir(parents=True, exist_ok=True)
        try:
            with open(path, "w") as f:
                data_to_save = self.__dict__.copy()
                data_to_save["api_key"] = ""
                data_to_save["history_file"] = str(data_to_save["history_file"])
                yaml.dump(data_to_save, f)
        except Exception as e:
            logger.error(f"Error saving config to {path}: {e}")

    def truncate_history_file(self):
        if self.history_file.exists():
            try:
                with open(self.history_file, "r") as f:
                    lines = f.readlines()
                if len(lines) > self.max_history_entries:
                    with open(self.history_file, "w") as f:
                        f.writelines(lines[-self.max_history_entries :])
            except Exception as e:
                logger.error(f"Error truncating history file: {e}")


def get_file_content_and_mime(file_path: Path) -> Optional[Dict[str, str]]:
    try:
        mime_type, _ = mimetypes.guess_type(file_path.name)
        mime_type = mime_type or "application/octet-stream"
        with open(file_path, "rb") as f:
            file_content = b64encode(f.read()).decode("utf-8")
        return {
            "mime_type": mime_type,
            "data": file_content,
            "file_name": file_path.name,
        }
    except FileNotFoundError:
        logger.error(f"File not found: {file_path}")
        return None
    except Exception as e:
        logger.error(f"Error reading file: {file_path}. {e}")
        return None


def render_rich_output(text: str, theme: str, console: Console) -> str:
    formatted_lines = []
    is_code_block = False
    code_buffer = []
    code_language = ""

    for line in text.splitlines():
        if line.startswith("```"):
            if is_code_block:
                code = "\n".join(code_buffer)
                if code_language == "python":
                    try:
                        code = autopep8.fix_code(code)
                    except Exception:
                        console.print("[yellow]PEP8 formatting error.[/yellow]")
                syntax = Syntax(code, code_language or "text", theme=theme)
                formatted_lines.append(syntax)
                code_buffer = []
                is_code_block = False
                code_language = ""
            else:
                code_language = line[3:].strip()
                is_code_block = True
        elif is_code_block:
            code_buffer.append(line)
        else:
            formatted_lines.append(Markdown(line))

    # Instead of building a string, append rendered objects directly
    rendered_output = []
    for line in formatted_lines:
        if isinstance(line, Syntax) or isinstance(line, Markdown):
            rendered_output.append(line)
        else:
            rendered_output.append(line)  # Keep as is if not special Rich object

    return rendered_output


class GeminiClient:
    BASE_URL = (
        "https://generativelanguage.googleapis.com/v1beta/models/{}:generateContent"
    )

    def __init__(self, config: Config):
        self.config = config
        self.session = requests.Session()
        self.session.headers.update({"Content-Type": "application/json"})
        self.console = Console()

    def make_api_request(
        self, url: str, params: Dict[str, str], payload: Dict[str, Any]
    ) -> Optional[Dict]:
        try:
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                transient=True,
            ) as progress:
                task_id = progress.add_task("[cyan]Generating response...", total=None)
                response = self.session.post(
                    url, json=payload, params=params, timeout=self.config.timeout
                )
                response.raise_for_status()
                progress.update(task_id, completed=1)
                return response.json()
        except requests.Timeout:
            self.console.print("[red]Request timeout.[/red]")
            logger.error("API request timeout", exc_info=True)
            return None
        except requests.ConnectionError as e:
            self.console.print("[red]Connection error.[/red]")
            logger.error("API connection error", exc_info=True)
            return None
        except requests.HTTPError as e:
            self.console.print(f"[red]HTTP error: {e.response.status_code}[/red]")
            logger.error(f"API HTTP error: {e}", exc_info=True)
            return None
        except requests.RequestException as e:
            self.console.print(f"[red]Request error: {e}[/red]")
            logger.error(f"API request error: {e}", exc_info=True)
            return None
        except json.JSONDecodeError as e:
            self.console.print("[red]JSON decode error.[/red]")
            logger.error(f"API JSON decode error: {e}", exc_info=True)
            return None
        except Exception as e:
            self.console.print("[red]Unexpected error.[/red]")
            logger.error(f"API unexpected error: {e}", exc_info=True)
            return None

    def send_message(
        self, prompt: str, files: Optional[List[Dict[str, str]]] = None
    ) -> str:
        url = self.BASE_URL.format(self.config.model_name)
        params = {"key": self.config.api_key}

        contents = [{"parts": [{"text": prompt}]}]
        if files:
            contents.extend([{"parts": [{"inline_data": file}]} for file in files])

        payload = {
            "contents": contents,
            "generationConfig": {
                "temperature": self.config.temperature,
                "topP": self.config.top_p,
                "maxOutputTokens": self.config.max_output_tokens,
            },
        }
        response_json = self.make_api_request(url, params, payload)

        if not response_json or not response_json.get("candidates"):
            error_msg = (
                response_json.get("promptFeedback", {}).get("blockReasonMessage")
                or "No response candidates"
            )
            self.console.print(f"[red]API error: {error_msg}[/red]")
            logger.error(f"API error: {error_msg}. Response: {response_json}")
            return ""

        text_response = response_json["candidates"][0]["content"]["parts"][0]["text"]

        self.config.conversation_history.append({"role": "user", "content": prompt})
        if files:
            for file in files:
                self.config.conversation_history.append(
                    {
                        "role": "user",
                        "content": f"Uploaded file: {file.get('file_name', 'file')}",
                    }
                )
        self.config.conversation_history.append(
            {"role": "assistant", "content": text_response}
        )
        return render_rich_output(text_response, self.config.theme, self.console)


class CommandHandler:
    def __init__(self, config: Config, client: GeminiClient):
        self.config = config
        self.client = client
        self.console = Console()
        self.commands = {
            "help": self.show_help,
            "config": self.show_config,
            "history": self.show_history,
            "clear": self.clear_history,
            "save": self.save_conversation,
            "load": self.load_conversation,
            "system": self.handle_system_prompt,
            "theme": self.change_theme,
            "temp": self.change_temperature,
            "top_p": self.change_top_p,
            "max_tokens": self.change_max_tokens,
            "upload": self.upload_file,
            "pep8": self.toggle_pep8_format,
            "exit": self.exit_cli,
        }
        self.uploaded_file = None

    def handle_command(self, command_str: str) -> bool:
        parts = command_str.strip().split()
        if not parts:
            return False
        command = parts[0].lower()
        args = parts[1:]

        if command in self.commands:
            try:
                return self.commands[command](*args)
            except TypeError:
                self.console.print(f"[red]Invalid arguments for command: /{command}[/red]")
                return False
            except Exception as e:
                self.console.print(f"[red]Error executing command /{command}: {e}[/red]")
                logger.error(f"Command execution error: /{command}", exc_info=True)
                return False
        else:
            self.console.print(f"[red]Unknown command: /{command}.[/red]")
            return False

    def show_help(self) -> bool:
        help_table = Table(title="Commands", show_header=False, show_lines=True)
        help_table.add_column("Command", style="cyan", no_wrap=True)
        help_table.add_column("Description", style="magenta")

        command_descriptions = {
            "help": "Show this help message.",
            "config": "Display current configuration.",
            "history": "Show conversation history.",
            "clear": "Clear conversation history.",
            "save <filename>": "Save conversation to a file.",
            "load <filename>": "Load conversation from a file.",
            "system <prompt>": "Set system prompt.",
            "theme <theme_name>": "Change color theme.",
            "temp <value>": "Set temperature (0.0-1.0).",
            "top_p <value>": "Set top_p (0.0-1.0).",
            "max_tokens <tokens>": "Set max output tokens.",
            "upload <filepath>": "Upload file for context.",
            "pep8": "Toggle PEP8 formatting.",
            "exit": "Exit the CLI.",
        }

        for cmd, desc in command_descriptions.items():
            help_table.add_row(f"/{cmd}", desc)
        self.console.print(help_table)
        return False

    def show_config(self) -> bool:
        config_table = Table(title="Configuration", show_header=True, header_style="bold cyan")
        config_table.add_column("Setting", style="magenta")
        config_table.add_column("Value", style="green")
        for key, value in self.config.__dict__.items():
            if key == "api_key":
                value = "********" if value else "Not set"
            config_table.add_row(key, str(value))
        self.console.print(config_table)
        return False

    def show_history(self) -> bool:
        if not self.config.conversation_history:
            self.console.print("[yellow]No history.[/yellow]")
            return False
        history_table = Table(title="History (last 10 entries)", show_header=True, header_style="bold cyan")
        history_table.add_column("Role", style="cyan")
        history_table.add_column("Content", style="green")
        for entry in self.config.conversation_history[-10:]:
            history_table.add_row(entry["role"], entry["content"])
        self.console.print(history_table)
        return False

    def clear_history(self) -> bool:
        self.config.conversation_history = []
        self.console.print("[green]History cleared.[/green]")
        return False

    def save_conversation(self, filename: Optional[str] = None) -> bool:
        if not filename:
            filename = f"gemini_conversation_{int(time.time())}.json"
        try:
            filepath = Path(filename)
            with open(filepath, "w") as f:
                json.dump(self.config.conversation_history, f, indent=2)
            self.console.print(f"[green]Conversation saved to '{filepath}'.[/green]")
        except Exception as e:
            self.console.print(f"[red]Error saving conversation: {e}[/red]")
            logger.error(f"Error saving conversation to file: {filename}", exc_info=True)
        return False

    def load_conversation(self, filename: Optional[str] = None) -> bool:
        if not filename:
            filename = input("Enter filename to load conversation from: ")
        filepath = Path(filename)
        if not filepath.exists():
            self.console.print(f"[red]File not found: '{filepath}'.[/red]")
            return False
        try:
            with open(filepath, "r") as f:
                self.config.conversation_history = json.load(f)
            self.console.print(f"[green]Conversation loaded from '{filepath}'.[/green]")
        except json.JSONDecodeError:
            self.console.print(f"[red]Invalid JSON file: '{filepath}'.[/red]")
            logger.error(f"JSON decode error loading file: {filename}", exc_info=True)
        except Exception as e:
            self.console.print(f"[red]Error loading conversation: {e}[/red]")
            logger.error(f"Error loading conversation from {filename}", exc_info=True)
        return False

    def handle_system_prompt(self, *prompt_parts: str) -> bool:
        if prompt_parts:
            self.config.system_prompt = " ".join(prompt_parts)
            self.console.print("[green]System prompt updated.[/green]")
        else:
            if self.config.system_prompt:
                self.console.print(Panel(self.config.system_prompt, title="System Prompt", border_style="blue"))
            else:
                self.console.print("[yellow]No system prompt set.[/yellow]")
        return False

    def change_theme(self, theme_name: Optional[str] = None) -> bool:
        if theme_name:
            try:
                Syntax("", "python", theme=theme_name)
                self.config.theme = theme_name
                self.console.print(f"[green]Theme set to '{theme_name}'.[/green]")
            except Exception:
                self.console.print("[red]Invalid theme name.[/red]")
        else:
            themes = sorted(Syntax.get_all_styles())
            theme_list = "\n".join(themes)
            self.console.print(Panel(theme_list, title="Available Themes", border_style="blue"))
        return False

    def change_temperature(self, temp_str: Optional[str] = None) -> bool:
        if temp_str:
            try:
                temp_value = float(temp_str)
                if 0.0 <= temp_value <= 1.0:
                    self.config.temperature = temp_value
                    self.console.print(f"[green]Temperature set to {temp_value}.[/green]")
                else:
                    self.console.print("[red]Temperature must be between 0.0 and 1.0.[/red]")
            except ValueError:
                self.console.print("[red]Invalid temperature value.[/red]")
        else:
            self.console.print(f"[blue]Current temperature: {self.config.temperature}[/blue]")
        return False

    def change_top_p(self, top_p_str: Optional[str] = None) -> bool:
        if top_p_str:
            try:
                top_p_value = float(top_p_str)
                if 0.0 <= top_p_value <= 1.0:
                    self.config.top_p = top_p_value
                    self.console.print(f"[green]Top P set to {top_p_value}.[/green]")
                else:
                    self.console.print("[red]Top P must be between 0.0 and 1.0.[/red]")
            except ValueError:
                self.console.print("[red]Invalid Top P value.[/red]")
        else:
            self.console.print(f"[blue]Current Top P: {self.config.top_p}[/blue]")
        return False

    def change_max_tokens(self, max_tokens_str: Optional[str] = None) -> bool:
        if max_tokens_str:
            try:
                max_tokens_int = int(max_tokens_str)
                if max_tokens_int > 0:
                    self.config.max_output_tokens = max_tokens_int
                    self.console.print(f"[green]Max output tokens set to {max_tokens_int}.[/green]")
                else:
                    self.console.print("[red]Max tokens must be positive.[/red]")
            except ValueError:
                self.console.print("[red]Invalid max tokens value.[/red]")
        else:
            self.console.print(f"[blue]Current max output tokens: {self.config.max_output_tokens}[/blue]")
        return False

    def upload_file(self, file_path_str: Optional[str] = None) -> bool:
        if not file_path_str:
            file_path_str = input("Enter file path to upload: ")
        if not file_path_str:
            return False

        file_path = Path(file_path_str)
        if not file_path.exists() or not file_path.is_file():
            self.console.print(f"[red]Invalid file path: '{file_path}'.[/red]")
            return False

        file_data = get_file_content_and_mime(file_path)
        if file_data:
            self.uploaded_file = file_data
            self.console.print(f"[green]File '{file_path.name}' uploaded.[/green]")
        else:
            self.uploaded_file = None  # Ensure uploaded_file is reset on failure
        return False

    def toggle_pep8_format(self) -> bool:
        self.config.pep8_format = not self.config.pep8_format
        status = "enabled" if self.config.pep8_format else "disabled"
        self.console.print(f"[green]PEP8 formatting {status}.[/green]")
        return False

    def exit_cli(self) -> bool:
        self.console.print("[bold blue]Exiting Gemini CLI.[/bold blue]")
        return True


def main():
    parser = argparse.ArgumentParser(description="
